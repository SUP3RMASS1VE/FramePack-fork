bucket_options = {
    512: [
        (320, 832),
        (352, 768),
        (384, 704),
        (416, 640),
        (448, 576),
        (480, 544),
        (512, 512),
        (544, 480),
        (576, 448),
        (640, 416),
        (704, 384),
        (768, 352),
        (832, 320),
    ],
    576: [
        (384, 864),
        (416, 800),
        (448, 736),
        (480, 704),
        (512, 640),
        (544, 608),
        (576, 576),
        (608, 544),
        (640, 512),
        (704, 480),
        (736, 448),
        (800, 416),
        (864, 384),
    ],
    640: [
        (416, 960),
        (448, 864),
        (480, 832),
        (512, 768),
        (544, 704),
        (576, 672),
        (608, 640),
        (640, 608),
        (672, 576),
        (704, 544),
        (768, 512),
        (832, 480),
        (864, 448),
        (960, 416),
    ],
    704: [
        (448, 1088),
        (480, 1024),
        (512, 960),
        (544, 896),
        (576, 864),
        (608, 832),
        (640, 768),
        (672, 736),
        (704, 704),
        (736, 672),
        (768, 640),
        (832, 608),
        (864, 576),
        (896, 544),
        (960, 512),
        (1024, 480),
        (1088, 448),
    ],
    768: [
        (512, 1152),
        (544, 1088),
        (576, 1024),
        (608, 960),
        (640, 896),
        (672, 864),
        (704, 832),
        (736, 800),
        (768, 768),
        (800, 736),
        (832, 704),
        (864, 672),
        (896, 640),
        (960, 608),
        (1024, 576),
        (1088, 544),
        (1152, 512),
    ],
    832: [
        (544, 1248),
        (576, 1184),
        (608, 1120),
        (640, 1088),
        (672, 1024),
        (704, 992),
        (736, 928),
        (768, 896),
        (800, 864),
        (832, 832),
        (864, 800),
        (896, 768),
        (928, 736),
        (992, 704),
        (1024, 672),
        (1088, 640),
        (1120, 608),
        (1184, 576),
        (1248, 544),
    ],
    896: [
        (576, 1344),
        (608, 1280),
        (640, 1216),
        (672, 1152),
        (704, 1120),
        (736, 1088),
        (768, 1024),
        (800, 992),
        (832, 960),
        (864, 928),
        (896, 896),
        (928, 864),
        (960, 832),
        (992, 800),
        (1024, 768),
        (1088, 736),
        (1120, 704),
        (1152, 672),
        (1216, 640),
        (1280, 608),
        (1344, 576),
    ],
    960: [
        (608, 1472),
        (640, 1408),
        (672, 1344),
        (704, 1312),
        (736, 1248),
        (768, 1216),
        (800, 1152),
        (832, 1120),
        (864, 1088),
        (896, 1024),
        (928, 992),
        (960, 960),
        (992, 928),
        (1024, 896),
        (1088, 864),
        (1120, 832),
        (1152, 800),
        (1216, 768),
        (1248, 736),
        (1312, 704),
        (1344, 672),
        (1408, 640),
        (1472, 608),
    ],
    1024: [
        (640, 1600),
        (672, 1536),
        (704, 1472),
        (736, 1408),
        (768, 1344),
        (800, 1280),
        (832, 1248),
        (864, 1216),
        (896, 1152),
        (928, 1120),
        (960, 1088),
        (992, 1056),
        (1024, 1024),
        (1056, 992),
        (1088, 960),
        (1120, 928),
        (1152, 896),
        (1216, 864),
        (1248, 832),
        (1280, 800),
        (1344, 768),
        (1408, 736),
        (1472, 704),
        (1536, 672),
        (1600, 640),
    ],
}


def find_nearest_bucket(h, w, resolution=640):
    min_metric = float('inf')
    best_bucket = None
    for (bucket_h, bucket_w) in bucket_options[resolution]:
        metric = abs(h * bucket_w - w * bucket_h)
        if metric <= min_metric:
            min_metric = metric
            best_bucket = (bucket_h, bucket_w)
    return best_bucket

